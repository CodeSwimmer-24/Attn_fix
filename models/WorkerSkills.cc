/**
 *
 *  WorkerSkills.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "WorkerSkills.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::workersdb;

const std::string WorkerSkills::Cols::_id = "id";
const std::string WorkerSkills::Cols::_worker = "worker";
const std::string WorkerSkills::Cols::_skill = "skill";
const std::string WorkerSkills::primaryKeyName = "id";
const bool WorkerSkills::hasPrimaryKey = true;
const std::string WorkerSkills::tableName = "worker_skills";

const std::vector<typename WorkerSkills::MetaData> WorkerSkills::metaData_={
{"id","uint32_t","int(10) unsigned",4,0,1,1},
{"worker","uint32_t","int(11) unsigned",4,0,0,1},
{"skill","uint32_t","int(11) unsigned",4,0,0,1}
};
const std::string &WorkerSkills::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
WorkerSkills::WorkerSkills(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint32_t>(r["id"].as<uint32_t>());
        }
        if(!r["worker"].isNull())
        {
            worker_=std::make_shared<uint32_t>(r["worker"].as<uint32_t>());
        }
        if(!r["skill"].isNull())
        {
            skill_=std::make_shared<uint32_t>(r["skill"].as<uint32_t>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 3 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            worker_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            skill_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
    }

}

WorkerSkills::WorkerSkills(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            worker_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            skill_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
}

WorkerSkills::WorkerSkills(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("worker"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["worker"].isNull())
        {
            worker_=std::make_shared<uint32_t>((uint32_t)pJson["worker"].asUInt64());
        }
    }
    if(pJson.isMember("skill"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["skill"].isNull())
        {
            skill_=std::make_shared<uint32_t>((uint32_t)pJson["skill"].asUInt64());
        }
    }
}

void WorkerSkills::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 3)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            worker_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[1]].asUInt64());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            skill_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[2]].asUInt64());
        }
    }
}

void WorkerSkills::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("worker"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["worker"].isNull())
        {
            worker_=std::make_shared<uint32_t>((uint32_t)pJson["worker"].asUInt64());
        }
    }
    if(pJson.isMember("skill"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["skill"].isNull())
        {
            skill_=std::make_shared<uint32_t>((uint32_t)pJson["skill"].asUInt64());
        }
    }
}

const uint32_t &WorkerSkills::getValueOfId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &WorkerSkills::getId() const noexcept
{
    return id_;
}
void WorkerSkills::setId(const uint32_t &pId) noexcept
{
    id_ = std::make_shared<uint32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename WorkerSkills::PrimaryKeyType & WorkerSkills::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const uint32_t &WorkerSkills::getValueOfWorker() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(worker_)
        return *worker_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &WorkerSkills::getWorker() const noexcept
{
    return worker_;
}
void WorkerSkills::setWorker(const uint32_t &pWorker) noexcept
{
    worker_ = std::make_shared<uint32_t>(pWorker);
    dirtyFlag_[1] = true;
}

const uint32_t &WorkerSkills::getValueOfSkill() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(skill_)
        return *skill_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &WorkerSkills::getSkill() const noexcept
{
    return skill_;
}
void WorkerSkills::setSkill(const uint32_t &pSkill) noexcept
{
    skill_ = std::make_shared<uint32_t>(pSkill);
    dirtyFlag_[2] = true;
}

void WorkerSkills::updateId(const uint64_t id)
{
}

const std::vector<std::string> &WorkerSkills::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "id",
        "worker",
        "skill"
    };
    return inCols;
}

void WorkerSkills::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getWorker())
        {
            binder << getValueOfWorker();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSkill())
        {
            binder << getValueOfSkill();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> WorkerSkills::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[0])
    {
        ret.push_back(getColumnName(0));
    }
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    return ret;
}

void WorkerSkills::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[0])
    {
        if(getId())
        {
            binder << getValueOfId();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[1])
    {
        if(getWorker())
        {
            binder << getValueOfWorker();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getSkill())
        {
            binder << getValueOfSkill();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value WorkerSkills::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWorker())
    {
        ret["worker"]=getValueOfWorker();
    }
    else
    {
        ret["worker"]=Json::Value();
    }
    if(getSkill())
    {
        ret["skill"]=getValueOfSkill();
    }
    else
    {
        ret["skill"]=Json::Value();
    }
    return ret;
}

Json::Value WorkerSkills::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 3)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getWorker())
            {
                ret[pMasqueradingVector[1]]=getValueOfWorker();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getSkill())
            {
                ret[pMasqueradingVector[2]]=getValueOfSkill();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getWorker())
    {
        ret["worker"]=getValueOfWorker();
    }
    else
    {
        ret["worker"]=Json::Value();
    }
    if(getSkill())
    {
        ret["skill"]=getValueOfSkill();
    }
    else
    {
        ret["skill"]=Json::Value();
    }
    return ret;
}

bool WorkerSkills::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    else
    {
        err="The id column cannot be null";
        return false;
    }
    if(pJson.isMember("worker"))
    {
        if(!validJsonOfField(1, "worker", pJson["worker"], err, true))
            return false;
    }
    else
    {
        err="The worker column cannot be null";
        return false;
    }
    if(pJson.isMember("skill"))
    {
        if(!validJsonOfField(2, "skill", pJson["skill"], err, true))
            return false;
    }
    else
    {
        err="The skill column cannot be null";
        return false;
    }
    return true;
}
bool WorkerSkills::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                      const std::vector<std::string> &pMasqueradingVector,
                                                      std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[0] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool WorkerSkills::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("worker"))
    {
        if(!validJsonOfField(1, "worker", pJson["worker"], err, false))
            return false;
    }
    if(pJson.isMember("skill"))
    {
        if(!validJsonOfField(2, "skill", pJson["skill"], err, false))
            return false;
    }
    return true;
}
bool WorkerSkills::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                                    const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err)
{
    if(pMasqueradingVector.size() != 3)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool WorkerSkills::validJsonOfField(size_t index,
                                    const std::string &fieldName,
                                    const Json::Value &pJson,
                                    std::string &err,
                                    bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
