/**
 *
 *  Workers.h
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#pragma once
#include <drogon/orm/Result.h>
#include <drogon/orm/Row.h>
#include <drogon/orm/Field.h>
#include <drogon/orm/SqlBinder.h>
#include <drogon/orm/Mapper.h>
#include <drogon/orm/BaseBuilder.h>
#ifdef __cpp_impl_coroutine
#include <drogon/orm/CoroMapper.h>
#endif
#include <trantor/utils/Date.h>
#include <trantor/utils/Logger.h>
#include <json/json.h>
#include <string>
#include <string_view>
#include <memory>
#include <vector>
#include <tuple>
#include <stdint.h>
#include <iostream>

namespace drogon
{
namespace orm
{
class DbClient;
using DbClientPtr = std::shared_ptr<DbClient>;
}
}
namespace drogon_model
{
namespace workersdb
{

class Workers
{
  public:
    struct Cols
    {
        static const std::string _id;
        static const std::string _full_name;
        static const std::string _email;
        static const std::string _contact;
        static const std::string _secondary_contact;
        static const std::string _address;
        static const std::string _locality;
        static const std::string _district;
        static const std::string _state;
        static const std::string _adhar_no;
        static const std::string _age;
        static const std::string _gender;
        static const std::string _qualification;
        static const std::string _work_exp;
        static const std::string _previous_work;
        static const std::string _expected_salary;
        static const std::string _expected_daily_wage;
        static const std::string _work_hours;
        static const std::string _skills;
        static const std::string _description;
        static const std::string _extra_condition;
    };

    const static int primaryKeyNumber;
    const static std::string tableName;
    const static bool hasPrimaryKey;
    const static std::string primaryKeyName;
    using PrimaryKeyType = uint32_t;
    const PrimaryKeyType &getPrimaryKey() const;

    /**
     * @brief constructor
     * @param r One row of records in the SQL query result.
     * @param indexOffset Set the offset to -1 to access all columns by column names,
     * otherwise access all columns by offsets.
     * @note If the SQL is not a style of 'select * from table_name ...' (select all
     * columns by an asterisk), please set the offset to -1.
     */
    explicit Workers(const drogon::orm::Row &r, const ssize_t indexOffset = 0) noexcept;

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     */
    explicit Workers(const Json::Value &pJson) noexcept(false);

    /**
     * @brief constructor
     * @param pJson The json object to construct a new instance.
     * @param pMasqueradingVector The aliases of table columns.
     */
    Workers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false);

    Workers() = default;

    void updateByJson(const Json::Value &pJson) noexcept(false);
    void updateByMasqueradedJson(const Json::Value &pJson,
                                 const std::vector<std::string> &pMasqueradingVector) noexcept(false);
    static bool validateJsonForCreation(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForCreation(const Json::Value &,
                                                const std::vector<std::string> &pMasqueradingVector,
                                                    std::string &err);
    static bool validateJsonForUpdate(const Json::Value &pJson, std::string &err);
    static bool validateMasqueradedJsonForUpdate(const Json::Value &,
                                          const std::vector<std::string> &pMasqueradingVector,
                                          std::string &err);
    static bool validJsonOfField(size_t index,
                          const std::string &fieldName,
                          const Json::Value &pJson,
                          std::string &err,
                          bool isForCreation);

    /**  For column id  */
    ///Get the value of the column id, returns the default value if the column is null
    const uint32_t &getValueOfId() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getId() const noexcept;
    ///Set the value of the column id
    void setId(const uint32_t &pId) noexcept;

    /**  For column full_name  */
    ///Get the value of the column full_name, returns the default value if the column is null
    const std::string &getValueOfFullName() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getFullName() const noexcept;
    ///Set the value of the column full_name
    void setFullName(const std::string &pFullName) noexcept;
    void setFullName(std::string &&pFullName) noexcept;

    /**  For column email  */
    ///Get the value of the column email, returns the default value if the column is null
    const std::string &getValueOfEmail() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getEmail() const noexcept;
    ///Set the value of the column email
    void setEmail(const std::string &pEmail) noexcept;
    void setEmail(std::string &&pEmail) noexcept;

    /**  For column contact  */
    ///Get the value of the column contact, returns the default value if the column is null
    const uint64_t &getValueOfContact() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getContact() const noexcept;
    ///Set the value of the column contact
    void setContact(const uint64_t &pContact) noexcept;

    /**  For column secondary_contact  */
    ///Get the value of the column secondary_contact, returns the default value if the column is null
    const uint64_t &getValueOfSecondaryContact() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getSecondaryContact() const noexcept;
    ///Set the value of the column secondary_contact
    void setSecondaryContact(const uint64_t &pSecondaryContact) noexcept;
    void setSecondaryContactToNull() noexcept;

    /**  For column address  */
    ///Get the value of the column address, returns the default value if the column is null
    const std::string &getValueOfAddress() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getAddress() const noexcept;
    ///Set the value of the column address
    void setAddress(const std::string &pAddress) noexcept;
    void setAddress(std::string &&pAddress) noexcept;

    /**  For column locality  */
    ///Get the value of the column locality, returns the default value if the column is null
    const uint32_t &getValueOfLocality() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getLocality() const noexcept;
    ///Set the value of the column locality
    void setLocality(const uint32_t &pLocality) noexcept;

    /**  For column district  */
    ///Get the value of the column district, returns the default value if the column is null
    const uint32_t &getValueOfDistrict() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getDistrict() const noexcept;
    ///Set the value of the column district
    void setDistrict(const uint32_t &pDistrict) noexcept;

    /**  For column state  */
    ///Get the value of the column state, returns the default value if the column is null
    const uint32_t &getValueOfState() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getState() const noexcept;
    ///Set the value of the column state
    void setState(const uint32_t &pState) noexcept;

    /**  For column adhar_no  */
    ///Get the value of the column adhar_no, returns the default value if the column is null
    const uint64_t &getValueOfAdharNo() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint64_t> &getAdharNo() const noexcept;
    ///Set the value of the column adhar_no
    void setAdharNo(const uint64_t &pAdharNo) noexcept;

    /**  For column age  */
    ///Get the value of the column age, returns the default value if the column is null
    const uint8_t &getValueOfAge() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getAge() const noexcept;
    ///Set the value of the column age
    void setAge(const uint8_t &pAge) noexcept;

    /**  For column gender  */
    ///Get the value of the column gender, returns the default value if the column is null
    const uint8_t &getValueOfGender() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getGender() const noexcept;
    ///Set the value of the column gender
    void setGender(const uint8_t &pGender) noexcept;

    /**  For column qualification  */
    ///Get the value of the column qualification, returns the default value if the column is null
    const uint8_t &getValueOfQualification() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getQualification() const noexcept;
    ///Set the value of the column qualification
    void setQualification(const uint8_t &pQualification) noexcept;

    /**  For column work_exp  */
    ///Get the value of the column work_exp, returns the default value if the column is null
    const uint8_t &getValueOfWorkExp() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getWorkExp() const noexcept;
    ///Set the value of the column work_exp
    void setWorkExp(const uint8_t &pWorkExp) noexcept;

    /**  For column previous_work  */
    ///Get the value of the column previous_work, returns the default value if the column is null
    const std::string &getValueOfPreviousWork() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getPreviousWork() const noexcept;
    ///Set the value of the column previous_work
    void setPreviousWork(const std::string &pPreviousWork) noexcept;
    void setPreviousWork(std::string &&pPreviousWork) noexcept;
    void setPreviousWorkToNull() noexcept;

    /**  For column expected_salary  */
    ///Get the value of the column expected_salary, returns the default value if the column is null
    const uint32_t &getValueOfExpectedSalary() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getExpectedSalary() const noexcept;
    ///Set the value of the column expected_salary
    void setExpectedSalary(const uint32_t &pExpectedSalary) noexcept;

    /**  For column expected_daily_wage  */
    ///Get the value of the column expected_daily_wage, returns the default value if the column is null
    const uint16_t &getValueOfExpectedDailyWage() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint16_t> &getExpectedDailyWage() const noexcept;
    ///Set the value of the column expected_daily_wage
    void setExpectedDailyWage(const uint16_t &pExpectedDailyWage) noexcept;

    /**  For column work_hours  */
    ///Get the value of the column work_hours, returns the default value if the column is null
    const uint8_t &getValueOfWorkHours() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint8_t> &getWorkHours() const noexcept;
    ///Set the value of the column work_hours
    void setWorkHours(const uint8_t &pWorkHours) noexcept;

    /**  For column skills  */
    ///Get the value of the column skills, returns the default value if the column is null
    const uint32_t &getValueOfSkills() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<uint32_t> &getSkills() const noexcept;
    ///Set the value of the column skills
    void setSkills(const uint32_t &pSkills) noexcept;
    void setSkillsToNull() noexcept;

    /**  For column description  */
    ///Get the value of the column description, returns the default value if the column is null
    const std::string &getValueOfDescription() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getDescription() const noexcept;
    ///Set the value of the column description
    void setDescription(const std::string &pDescription) noexcept;
    void setDescription(std::string &&pDescription) noexcept;
    void setDescriptionToNull() noexcept;

    /**  For column extra_condition  */
    ///Get the value of the column extra_condition, returns the default value if the column is null
    const std::string &getValueOfExtraCondition() const noexcept;
    ///Return a shared_ptr object pointing to the column const value, or an empty shared_ptr object if the column is null
    const std::shared_ptr<std::string> &getExtraCondition() const noexcept;
    ///Set the value of the column extra_condition
    void setExtraCondition(const std::string &pExtraCondition) noexcept;
    void setExtraCondition(std::string &&pExtraCondition) noexcept;
    void setExtraConditionToNull() noexcept;


    static size_t getColumnNumber() noexcept {  return 21;  }
    static const std::string &getColumnName(size_t index) noexcept(false);

    Json::Value toJson() const;
    Json::Value toMasqueradedJson(const std::vector<std::string> &pMasqueradingVector) const;
    /// Relationship interfaces
  private:
    friend drogon::orm::Mapper<Workers>;
    friend drogon::orm::BaseBuilder<Workers, true, true>;
    friend drogon::orm::BaseBuilder<Workers, true, false>;
    friend drogon::orm::BaseBuilder<Workers, false, true>;
    friend drogon::orm::BaseBuilder<Workers, false, false>;
#ifdef __cpp_impl_coroutine
    friend drogon::orm::CoroMapper<Workers>;
#endif
    static const std::vector<std::string> &insertColumns() noexcept;
    void outputArgs(drogon::orm::internal::SqlBinder &binder) const;
    const std::vector<std::string> updateColumns() const;
    void updateArgs(drogon::orm::internal::SqlBinder &binder) const;
    ///For mysql or sqlite3
    void updateId(const uint64_t id);
    std::shared_ptr<uint32_t> id_;
    std::shared_ptr<std::string> fullName_;
    std::shared_ptr<std::string> email_;
    std::shared_ptr<uint64_t> contact_;
    std::shared_ptr<uint64_t> secondaryContact_;
    std::shared_ptr<std::string> address_;
    std::shared_ptr<uint32_t> locality_;
    std::shared_ptr<uint32_t> district_;
    std::shared_ptr<uint32_t> state_;
    std::shared_ptr<uint64_t> adharNo_;
    std::shared_ptr<uint8_t> age_;
    std::shared_ptr<uint8_t> gender_;
    std::shared_ptr<uint8_t> qualification_;
    std::shared_ptr<uint8_t> workExp_;
    std::shared_ptr<std::string> previousWork_;
    std::shared_ptr<uint32_t> expectedSalary_;
    std::shared_ptr<uint16_t> expectedDailyWage_;
    std::shared_ptr<uint8_t> workHours_;
    std::shared_ptr<uint32_t> skills_;
    std::shared_ptr<std::string> description_;
    std::shared_ptr<std::string> extraCondition_;
    struct MetaData
    {
        const std::string colName_;
        const std::string colType_;
        const std::string colDatabaseType_;
        const ssize_t colLength_;
        const bool isAutoVal_;
        const bool isPrimaryKey_;
        const bool notNull_;
    };
    static const std::vector<MetaData> metaData_;
    bool dirtyFlag_[21]={ false };
  public:
    static const std::string &sqlForFindingByPrimaryKey()
    {
        static const std::string sql="select * from " + tableName + " where id = ?";
        return sql;
    }

    static const std::string &sqlForDeletingByPrimaryKey()
    {
        static const std::string sql="delete from " + tableName + " where id = ?";
        return sql;
    }
    std::string sqlForInserting(bool &needSelection) const
    {
        std::string sql="insert into " + tableName + " (";
        size_t parametersCount = 0;
        needSelection = false;
            sql += "id,";
            ++parametersCount;
        if(dirtyFlag_[1])
        {
            sql += "full_name,";
            ++parametersCount;
        }
        if(dirtyFlag_[2])
        {
            sql += "email,";
            ++parametersCount;
        }
        if(dirtyFlag_[3])
        {
            sql += "contact,";
            ++parametersCount;
        }
        if(dirtyFlag_[4])
        {
            sql += "secondary_contact,";
            ++parametersCount;
        }
        if(dirtyFlag_[5])
        {
            sql += "address,";
            ++parametersCount;
        }
        if(dirtyFlag_[6])
        {
            sql += "locality,";
            ++parametersCount;
        }
        if(dirtyFlag_[7])
        {
            sql += "district,";
            ++parametersCount;
        }
        if(dirtyFlag_[8])
        {
            sql += "state,";
            ++parametersCount;
        }
        if(dirtyFlag_[9])
        {
            sql += "adhar_no,";
            ++parametersCount;
        }
        if(dirtyFlag_[10])
        {
            sql += "age,";
            ++parametersCount;
        }
        if(dirtyFlag_[11])
        {
            sql += "gender,";
            ++parametersCount;
        }
        if(dirtyFlag_[12])
        {
            sql += "qualification,";
            ++parametersCount;
        }
        if(dirtyFlag_[13])
        {
            sql += "work_exp,";
            ++parametersCount;
        }
        if(dirtyFlag_[14])
        {
            sql += "previous_work,";
            ++parametersCount;
        }
        if(dirtyFlag_[15])
        {
            sql += "expected_salary,";
            ++parametersCount;
        }
        if(dirtyFlag_[16])
        {
            sql += "expected_daily_wage,";
            ++parametersCount;
        }
        if(dirtyFlag_[17])
        {
            sql += "work_hours,";
            ++parametersCount;
        }
        if(dirtyFlag_[18])
        {
            sql += "skills,";
            ++parametersCount;
        }
        if(dirtyFlag_[19])
        {
            sql += "description,";
            ++parametersCount;
        }
        if(dirtyFlag_[20])
        {
            sql += "extra_condition,";
            ++parametersCount;
        }
        needSelection=true;
        if(parametersCount > 0)
        {
            sql[sql.length()-1]=')';
            sql += " values (";
        }
        else
            sql += ") values (";

        sql +="default,";
        if(dirtyFlag_[1])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[2])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[3])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[4])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[5])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[6])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[7])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[8])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[9])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[10])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[11])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[12])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[13])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[14])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[15])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[16])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[17])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[18])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[19])
        {
            sql.append("?,");

        }
        if(dirtyFlag_[20])
        {
            sql.append("?,");

        }
        if(parametersCount > 0)
        {
            sql.resize(sql.length() - 1);
        }
        sql.append(1, ')');
        LOG_TRACE << sql;
        return sql;
    }
};
} // namespace workersdb
} // namespace drogon_model
