/**
 *
 *  Workers.cc
 *  DO NOT EDIT. This file is generated by drogon_ctl
 *
 */

#include "Workers.h"
#include <drogon/utils/Utilities.h>
#include <string>

using namespace drogon;
using namespace drogon::orm;
using namespace drogon_model::workersdb;

const std::string Workers::Cols::_id = "id";
const std::string Workers::Cols::_full_name = "full_name";
const std::string Workers::Cols::_email = "email";
const std::string Workers::Cols::_contact = "contact";
const std::string Workers::Cols::_secondary_contact = "secondary_contact";
const std::string Workers::Cols::_address = "address";
const std::string Workers::Cols::_locality = "locality";
const std::string Workers::Cols::_district = "district";
const std::string Workers::Cols::_state = "state";
const std::string Workers::Cols::_adhar_no = "adhar_no";
const std::string Workers::Cols::_age = "age";
const std::string Workers::Cols::_gender = "gender";
const std::string Workers::Cols::_qualification = "qualification";
const std::string Workers::Cols::_work_exp = "work_exp";
const std::string Workers::Cols::_previous_work = "previous_work";
const std::string Workers::Cols::_expected_salary = "expected_salary";
const std::string Workers::Cols::_expected_daily_wage = "expected_daily_wage";
const std::string Workers::Cols::_work_hours = "work_hours";
const std::string Workers::Cols::_skills = "skills";
const std::string Workers::Cols::_description = "description";
const std::string Workers::Cols::_extra_condition = "extra_condition";
const std::string Workers::primaryKeyName = "id";
const bool Workers::hasPrimaryKey = true;
const std::string Workers::tableName = "workers";

const std::vector<typename Workers::MetaData> Workers::metaData_={
{"id","uint32_t","int(10) unsigned",4,1,1,1},
{"full_name","std::string","varchar(60)",60,0,0,1},
{"email","std::string","varchar(120)",120,0,0,1},
{"contact","uint64_t","bigint(20) unsigned",8,0,0,1},
{"secondary_contact","uint64_t","bigint(20) unsigned",8,0,0,0},
{"address","std::string","text",0,0,0,1},
{"locality","uint32_t","int(10) unsigned",4,0,0,1},
{"district","uint32_t","int(10) unsigned",4,0,0,1},
{"state","uint32_t","int(10) unsigned",4,0,0,1},
{"adhar_no","uint64_t","bigint(20) unsigned",8,0,0,1},
{"age","uint8_t","tinyint(3) unsigned",1,0,0,1},
{"gender","uint8_t","tinyint(3) unsigned",1,0,0,1},
{"qualification","uint8_t","tinyint(3) unsigned",1,0,0,1},
{"work_exp","uint8_t","tinyint(3) unsigned",1,0,0,1},
{"previous_work","std::string","varchar(255)",255,0,0,0},
{"expected_salary","uint32_t","int(10) unsigned",4,0,0,1},
{"expected_daily_wage","uint16_t","smallint(5) unsigned",2,0,0,1},
{"work_hours","uint8_t","tinyint(3) unsigned",1,0,0,1},
{"skills","uint32_t","int(10) unsigned",4,0,0,0},
{"description","std::string","varchar(500)",500,0,0,0},
{"extra_condition","std::string","varchar(500)",500,0,0,0}
};
const std::string &Workers::getColumnName(size_t index) noexcept(false)
{
    assert(index < metaData_.size());
    return metaData_[index].colName_;
}
Workers::Workers(const Row &r, const ssize_t indexOffset) noexcept
{
    if(indexOffset < 0)
    {
        if(!r["id"].isNull())
        {
            id_=std::make_shared<uint32_t>(r["id"].as<uint32_t>());
        }
        if(!r["full_name"].isNull())
        {
            fullName_=std::make_shared<std::string>(r["full_name"].as<std::string>());
        }
        if(!r["email"].isNull())
        {
            email_=std::make_shared<std::string>(r["email"].as<std::string>());
        }
        if(!r["contact"].isNull())
        {
            contact_=std::make_shared<uint64_t>(r["contact"].as<uint64_t>());
        }
        if(!r["secondary_contact"].isNull())
        {
            secondaryContact_=std::make_shared<uint64_t>(r["secondary_contact"].as<uint64_t>());
        }
        if(!r["address"].isNull())
        {
            address_=std::make_shared<std::string>(r["address"].as<std::string>());
        }
        if(!r["locality"].isNull())
        {
            locality_=std::make_shared<uint32_t>(r["locality"].as<uint32_t>());
        }
        if(!r["district"].isNull())
        {
            district_=std::make_shared<uint32_t>(r["district"].as<uint32_t>());
        }
        if(!r["state"].isNull())
        {
            state_=std::make_shared<uint32_t>(r["state"].as<uint32_t>());
        }
        if(!r["adhar_no"].isNull())
        {
            adharNo_=std::make_shared<uint64_t>(r["adhar_no"].as<uint64_t>());
        }
        if(!r["age"].isNull())
        {
            age_=std::make_shared<uint8_t>(r["age"].as<uint8_t>());
        }
        if(!r["gender"].isNull())
        {
            gender_=std::make_shared<uint8_t>(r["gender"].as<uint8_t>());
        }
        if(!r["qualification"].isNull())
        {
            qualification_=std::make_shared<uint8_t>(r["qualification"].as<uint8_t>());
        }
        if(!r["work_exp"].isNull())
        {
            workExp_=std::make_shared<uint8_t>(r["work_exp"].as<uint8_t>());
        }
        if(!r["previous_work"].isNull())
        {
            previousWork_=std::make_shared<std::string>(r["previous_work"].as<std::string>());
        }
        if(!r["expected_salary"].isNull())
        {
            expectedSalary_=std::make_shared<uint32_t>(r["expected_salary"].as<uint32_t>());
        }
        if(!r["expected_daily_wage"].isNull())
        {
            expectedDailyWage_=std::make_shared<uint16_t>(r["expected_daily_wage"].as<uint16_t>());
        }
        if(!r["work_hours"].isNull())
        {
            workHours_=std::make_shared<uint8_t>(r["work_hours"].as<uint8_t>());
        }
        if(!r["skills"].isNull())
        {
            skills_=std::make_shared<uint32_t>(r["skills"].as<uint32_t>());
        }
        if(!r["description"].isNull())
        {
            description_=std::make_shared<std::string>(r["description"].as<std::string>());
        }
        if(!r["extra_condition"].isNull())
        {
            extraCondition_=std::make_shared<std::string>(r["extra_condition"].as<std::string>());
        }
    }
    else
    {
        size_t offset = (size_t)indexOffset;
        if(offset + 21 > r.size())
        {
            LOG_FATAL << "Invalid SQL result for this model";
            return;
        }
        size_t index;
        index = offset + 0;
        if(!r[index].isNull())
        {
            id_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 1;
        if(!r[index].isNull())
        {
            fullName_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 2;
        if(!r[index].isNull())
        {
            email_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 3;
        if(!r[index].isNull())
        {
            contact_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 4;
        if(!r[index].isNull())
        {
            secondaryContact_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 5;
        if(!r[index].isNull())
        {
            address_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 6;
        if(!r[index].isNull())
        {
            locality_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 7;
        if(!r[index].isNull())
        {
            district_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 8;
        if(!r[index].isNull())
        {
            state_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 9;
        if(!r[index].isNull())
        {
            adharNo_=std::make_shared<uint64_t>(r[index].as<uint64_t>());
        }
        index = offset + 10;
        if(!r[index].isNull())
        {
            age_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 11;
        if(!r[index].isNull())
        {
            gender_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 12;
        if(!r[index].isNull())
        {
            qualification_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 13;
        if(!r[index].isNull())
        {
            workExp_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 14;
        if(!r[index].isNull())
        {
            previousWork_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 15;
        if(!r[index].isNull())
        {
            expectedSalary_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 16;
        if(!r[index].isNull())
        {
            expectedDailyWage_=std::make_shared<uint16_t>(r[index].as<uint16_t>());
        }
        index = offset + 17;
        if(!r[index].isNull())
        {
            workHours_=std::make_shared<uint8_t>(r[index].as<uint8_t>());
        }
        index = offset + 18;
        if(!r[index].isNull())
        {
            skills_=std::make_shared<uint32_t>(r[index].as<uint32_t>());
        }
        index = offset + 19;
        if(!r[index].isNull())
        {
            description_=std::make_shared<std::string>(r[index].as<std::string>());
        }
        index = offset + 20;
        if(!r[index].isNull())
        {
            extraCondition_=std::make_shared<std::string>(r[index].as<std::string>());
        }
    }

}

Workers::Workers(const Json::Value &pJson, const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 21)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        dirtyFlag_[0] = true;
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fullName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            contact_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            secondaryContact_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            locality_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            district_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            state_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            adharNo_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            age_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            qualification_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            workExp_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            previousWork_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            expectedSalary_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            expectedDailyWage_=std::make_shared<uint16_t>((uint16_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            workHours_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            skills_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            extraCondition_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
}

Workers::Workers(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        dirtyFlag_[0]=true;
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("full_name"))
    {
        dirtyFlag_[1]=true;
        if(!pJson["full_name"].isNull())
        {
            fullName_=std::make_shared<std::string>(pJson["full_name"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[2]=true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("contact"))
    {
        dirtyFlag_[3]=true;
        if(!pJson["contact"].isNull())
        {
            contact_=std::make_shared<uint64_t>((uint64_t)pJson["contact"].asUInt64());
        }
    }
    if(pJson.isMember("secondary_contact"))
    {
        dirtyFlag_[4]=true;
        if(!pJson["secondary_contact"].isNull())
        {
            secondaryContact_=std::make_shared<uint64_t>((uint64_t)pJson["secondary_contact"].asUInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[5]=true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("locality"))
    {
        dirtyFlag_[6]=true;
        if(!pJson["locality"].isNull())
        {
            locality_=std::make_shared<uint32_t>((uint32_t)pJson["locality"].asUInt64());
        }
    }
    if(pJson.isMember("district"))
    {
        dirtyFlag_[7]=true;
        if(!pJson["district"].isNull())
        {
            district_=std::make_shared<uint32_t>((uint32_t)pJson["district"].asUInt64());
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[8]=true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<uint32_t>((uint32_t)pJson["state"].asUInt64());
        }
    }
    if(pJson.isMember("adhar_no"))
    {
        dirtyFlag_[9]=true;
        if(!pJson["adhar_no"].isNull())
        {
            adharNo_=std::make_shared<uint64_t>((uint64_t)pJson["adhar_no"].asUInt64());
        }
    }
    if(pJson.isMember("age"))
    {
        dirtyFlag_[10]=true;
        if(!pJson["age"].isNull())
        {
            age_=std::make_shared<uint8_t>((uint8_t)pJson["age"].asUInt64());
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[11]=true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson["gender"].asUInt64());
        }
    }
    if(pJson.isMember("qualification"))
    {
        dirtyFlag_[12]=true;
        if(!pJson["qualification"].isNull())
        {
            qualification_=std::make_shared<uint8_t>((uint8_t)pJson["qualification"].asUInt64());
        }
    }
    if(pJson.isMember("work_exp"))
    {
        dirtyFlag_[13]=true;
        if(!pJson["work_exp"].isNull())
        {
            workExp_=std::make_shared<uint8_t>((uint8_t)pJson["work_exp"].asUInt64());
        }
    }
    if(pJson.isMember("previous_work"))
    {
        dirtyFlag_[14]=true;
        if(!pJson["previous_work"].isNull())
        {
            previousWork_=std::make_shared<std::string>(pJson["previous_work"].asString());
        }
    }
    if(pJson.isMember("expected_salary"))
    {
        dirtyFlag_[15]=true;
        if(!pJson["expected_salary"].isNull())
        {
            expectedSalary_=std::make_shared<uint32_t>((uint32_t)pJson["expected_salary"].asUInt64());
        }
    }
    if(pJson.isMember("expected_daily_wage"))
    {
        dirtyFlag_[16]=true;
        if(!pJson["expected_daily_wage"].isNull())
        {
            expectedDailyWage_=std::make_shared<uint16_t>((uint16_t)pJson["expected_daily_wage"].asUInt64());
        }
    }
    if(pJson.isMember("work_hours"))
    {
        dirtyFlag_[17]=true;
        if(!pJson["work_hours"].isNull())
        {
            workHours_=std::make_shared<uint8_t>((uint8_t)pJson["work_hours"].asUInt64());
        }
    }
    if(pJson.isMember("skills"))
    {
        dirtyFlag_[18]=true;
        if(!pJson["skills"].isNull())
        {
            skills_=std::make_shared<uint32_t>((uint32_t)pJson["skills"].asUInt64());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[19]=true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("extra_condition"))
    {
        dirtyFlag_[20]=true;
        if(!pJson["extra_condition"].isNull())
        {
            extraCondition_=std::make_shared<std::string>(pJson["extra_condition"].asString());
        }
    }
}

void Workers::updateByMasqueradedJson(const Json::Value &pJson,
                                            const std::vector<std::string> &pMasqueradingVector) noexcept(false)
{
    if(pMasqueradingVector.size() != 21)
    {
        LOG_ERROR << "Bad masquerading vector";
        return;
    }
    if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
    {
        if(!pJson[pMasqueradingVector[0]].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[0]].asUInt64());
        }
    }
    if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
    {
        dirtyFlag_[1] = true;
        if(!pJson[pMasqueradingVector[1]].isNull())
        {
            fullName_=std::make_shared<std::string>(pJson[pMasqueradingVector[1]].asString());
        }
    }
    if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
    {
        dirtyFlag_[2] = true;
        if(!pJson[pMasqueradingVector[2]].isNull())
        {
            email_=std::make_shared<std::string>(pJson[pMasqueradingVector[2]].asString());
        }
    }
    if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
    {
        dirtyFlag_[3] = true;
        if(!pJson[pMasqueradingVector[3]].isNull())
        {
            contact_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[3]].asUInt64());
        }
    }
    if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
    {
        dirtyFlag_[4] = true;
        if(!pJson[pMasqueradingVector[4]].isNull())
        {
            secondaryContact_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[4]].asUInt64());
        }
    }
    if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
    {
        dirtyFlag_[5] = true;
        if(!pJson[pMasqueradingVector[5]].isNull())
        {
            address_=std::make_shared<std::string>(pJson[pMasqueradingVector[5]].asString());
        }
    }
    if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
    {
        dirtyFlag_[6] = true;
        if(!pJson[pMasqueradingVector[6]].isNull())
        {
            locality_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[6]].asUInt64());
        }
    }
    if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
    {
        dirtyFlag_[7] = true;
        if(!pJson[pMasqueradingVector[7]].isNull())
        {
            district_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[7]].asUInt64());
        }
    }
    if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
    {
        dirtyFlag_[8] = true;
        if(!pJson[pMasqueradingVector[8]].isNull())
        {
            state_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[8]].asUInt64());
        }
    }
    if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
    {
        dirtyFlag_[9] = true;
        if(!pJson[pMasqueradingVector[9]].isNull())
        {
            adharNo_=std::make_shared<uint64_t>((uint64_t)pJson[pMasqueradingVector[9]].asUInt64());
        }
    }
    if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
    {
        dirtyFlag_[10] = true;
        if(!pJson[pMasqueradingVector[10]].isNull())
        {
            age_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[10]].asUInt64());
        }
    }
    if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
    {
        dirtyFlag_[11] = true;
        if(!pJson[pMasqueradingVector[11]].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[11]].asUInt64());
        }
    }
    if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
    {
        dirtyFlag_[12] = true;
        if(!pJson[pMasqueradingVector[12]].isNull())
        {
            qualification_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[12]].asUInt64());
        }
    }
    if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
    {
        dirtyFlag_[13] = true;
        if(!pJson[pMasqueradingVector[13]].isNull())
        {
            workExp_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[13]].asUInt64());
        }
    }
    if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
    {
        dirtyFlag_[14] = true;
        if(!pJson[pMasqueradingVector[14]].isNull())
        {
            previousWork_=std::make_shared<std::string>(pJson[pMasqueradingVector[14]].asString());
        }
    }
    if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
    {
        dirtyFlag_[15] = true;
        if(!pJson[pMasqueradingVector[15]].isNull())
        {
            expectedSalary_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[15]].asUInt64());
        }
    }
    if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
    {
        dirtyFlag_[16] = true;
        if(!pJson[pMasqueradingVector[16]].isNull())
        {
            expectedDailyWage_=std::make_shared<uint16_t>((uint16_t)pJson[pMasqueradingVector[16]].asUInt64());
        }
    }
    if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
    {
        dirtyFlag_[17] = true;
        if(!pJson[pMasqueradingVector[17]].isNull())
        {
            workHours_=std::make_shared<uint8_t>((uint8_t)pJson[pMasqueradingVector[17]].asUInt64());
        }
    }
    if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
    {
        dirtyFlag_[18] = true;
        if(!pJson[pMasqueradingVector[18]].isNull())
        {
            skills_=std::make_shared<uint32_t>((uint32_t)pJson[pMasqueradingVector[18]].asUInt64());
        }
    }
    if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
    {
        dirtyFlag_[19] = true;
        if(!pJson[pMasqueradingVector[19]].isNull())
        {
            description_=std::make_shared<std::string>(pJson[pMasqueradingVector[19]].asString());
        }
    }
    if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
    {
        dirtyFlag_[20] = true;
        if(!pJson[pMasqueradingVector[20]].isNull())
        {
            extraCondition_=std::make_shared<std::string>(pJson[pMasqueradingVector[20]].asString());
        }
    }
}

void Workers::updateByJson(const Json::Value &pJson) noexcept(false)
{
    if(pJson.isMember("id"))
    {
        if(!pJson["id"].isNull())
        {
            id_=std::make_shared<uint32_t>((uint32_t)pJson["id"].asUInt64());
        }
    }
    if(pJson.isMember("full_name"))
    {
        dirtyFlag_[1] = true;
        if(!pJson["full_name"].isNull())
        {
            fullName_=std::make_shared<std::string>(pJson["full_name"].asString());
        }
    }
    if(pJson.isMember("email"))
    {
        dirtyFlag_[2] = true;
        if(!pJson["email"].isNull())
        {
            email_=std::make_shared<std::string>(pJson["email"].asString());
        }
    }
    if(pJson.isMember("contact"))
    {
        dirtyFlag_[3] = true;
        if(!pJson["contact"].isNull())
        {
            contact_=std::make_shared<uint64_t>((uint64_t)pJson["contact"].asUInt64());
        }
    }
    if(pJson.isMember("secondary_contact"))
    {
        dirtyFlag_[4] = true;
        if(!pJson["secondary_contact"].isNull())
        {
            secondaryContact_=std::make_shared<uint64_t>((uint64_t)pJson["secondary_contact"].asUInt64());
        }
    }
    if(pJson.isMember("address"))
    {
        dirtyFlag_[5] = true;
        if(!pJson["address"].isNull())
        {
            address_=std::make_shared<std::string>(pJson["address"].asString());
        }
    }
    if(pJson.isMember("locality"))
    {
        dirtyFlag_[6] = true;
        if(!pJson["locality"].isNull())
        {
            locality_=std::make_shared<uint32_t>((uint32_t)pJson["locality"].asUInt64());
        }
    }
    if(pJson.isMember("district"))
    {
        dirtyFlag_[7] = true;
        if(!pJson["district"].isNull())
        {
            district_=std::make_shared<uint32_t>((uint32_t)pJson["district"].asUInt64());
        }
    }
    if(pJson.isMember("state"))
    {
        dirtyFlag_[8] = true;
        if(!pJson["state"].isNull())
        {
            state_=std::make_shared<uint32_t>((uint32_t)pJson["state"].asUInt64());
        }
    }
    if(pJson.isMember("adhar_no"))
    {
        dirtyFlag_[9] = true;
        if(!pJson["adhar_no"].isNull())
        {
            adharNo_=std::make_shared<uint64_t>((uint64_t)pJson["adhar_no"].asUInt64());
        }
    }
    if(pJson.isMember("age"))
    {
        dirtyFlag_[10] = true;
        if(!pJson["age"].isNull())
        {
            age_=std::make_shared<uint8_t>((uint8_t)pJson["age"].asUInt64());
        }
    }
    if(pJson.isMember("gender"))
    {
        dirtyFlag_[11] = true;
        if(!pJson["gender"].isNull())
        {
            gender_=std::make_shared<uint8_t>((uint8_t)pJson["gender"].asUInt64());
        }
    }
    if(pJson.isMember("qualification"))
    {
        dirtyFlag_[12] = true;
        if(!pJson["qualification"].isNull())
        {
            qualification_=std::make_shared<uint8_t>((uint8_t)pJson["qualification"].asUInt64());
        }
    }
    if(pJson.isMember("work_exp"))
    {
        dirtyFlag_[13] = true;
        if(!pJson["work_exp"].isNull())
        {
            workExp_=std::make_shared<uint8_t>((uint8_t)pJson["work_exp"].asUInt64());
        }
    }
    if(pJson.isMember("previous_work"))
    {
        dirtyFlag_[14] = true;
        if(!pJson["previous_work"].isNull())
        {
            previousWork_=std::make_shared<std::string>(pJson["previous_work"].asString());
        }
    }
    if(pJson.isMember("expected_salary"))
    {
        dirtyFlag_[15] = true;
        if(!pJson["expected_salary"].isNull())
        {
            expectedSalary_=std::make_shared<uint32_t>((uint32_t)pJson["expected_salary"].asUInt64());
        }
    }
    if(pJson.isMember("expected_daily_wage"))
    {
        dirtyFlag_[16] = true;
        if(!pJson["expected_daily_wage"].isNull())
        {
            expectedDailyWage_=std::make_shared<uint16_t>((uint16_t)pJson["expected_daily_wage"].asUInt64());
        }
    }
    if(pJson.isMember("work_hours"))
    {
        dirtyFlag_[17] = true;
        if(!pJson["work_hours"].isNull())
        {
            workHours_=std::make_shared<uint8_t>((uint8_t)pJson["work_hours"].asUInt64());
        }
    }
    if(pJson.isMember("skills"))
    {
        dirtyFlag_[18] = true;
        if(!pJson["skills"].isNull())
        {
            skills_=std::make_shared<uint32_t>((uint32_t)pJson["skills"].asUInt64());
        }
    }
    if(pJson.isMember("description"))
    {
        dirtyFlag_[19] = true;
        if(!pJson["description"].isNull())
        {
            description_=std::make_shared<std::string>(pJson["description"].asString());
        }
    }
    if(pJson.isMember("extra_condition"))
    {
        dirtyFlag_[20] = true;
        if(!pJson["extra_condition"].isNull())
        {
            extraCondition_=std::make_shared<std::string>(pJson["extra_condition"].asString());
        }
    }
}

const uint32_t &Workers::getValueOfId() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(id_)
        return *id_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Workers::getId() const noexcept
{
    return id_;
}
void Workers::setId(const uint32_t &pId) noexcept
{
    id_ = std::make_shared<uint32_t>(pId);
    dirtyFlag_[0] = true;
}
const typename Workers::PrimaryKeyType & Workers::getPrimaryKey() const
{
    assert(id_);
    return *id_;
}

const std::string &Workers::getValueOfFullName() const noexcept
{
    const static std::string defaultValue = std::string();
    if(fullName_)
        return *fullName_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getFullName() const noexcept
{
    return fullName_;
}
void Workers::setFullName(const std::string &pFullName) noexcept
{
    fullName_ = std::make_shared<std::string>(pFullName);
    dirtyFlag_[1] = true;
}
void Workers::setFullName(std::string &&pFullName) noexcept
{
    fullName_ = std::make_shared<std::string>(std::move(pFullName));
    dirtyFlag_[1] = true;
}

const std::string &Workers::getValueOfEmail() const noexcept
{
    const static std::string defaultValue = std::string();
    if(email_)
        return *email_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getEmail() const noexcept
{
    return email_;
}
void Workers::setEmail(const std::string &pEmail) noexcept
{
    email_ = std::make_shared<std::string>(pEmail);
    dirtyFlag_[2] = true;
}
void Workers::setEmail(std::string &&pEmail) noexcept
{
    email_ = std::make_shared<std::string>(std::move(pEmail));
    dirtyFlag_[2] = true;
}

const uint64_t &Workers::getValueOfContact() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(contact_)
        return *contact_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Workers::getContact() const noexcept
{
    return contact_;
}
void Workers::setContact(const uint64_t &pContact) noexcept
{
    contact_ = std::make_shared<uint64_t>(pContact);
    dirtyFlag_[3] = true;
}

const uint64_t &Workers::getValueOfSecondaryContact() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(secondaryContact_)
        return *secondaryContact_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Workers::getSecondaryContact() const noexcept
{
    return secondaryContact_;
}
void Workers::setSecondaryContact(const uint64_t &pSecondaryContact) noexcept
{
    secondaryContact_ = std::make_shared<uint64_t>(pSecondaryContact);
    dirtyFlag_[4] = true;
}
void Workers::setSecondaryContactToNull() noexcept
{
    secondaryContact_.reset();
    dirtyFlag_[4] = true;
}

const std::string &Workers::getValueOfAddress() const noexcept
{
    const static std::string defaultValue = std::string();
    if(address_)
        return *address_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getAddress() const noexcept
{
    return address_;
}
void Workers::setAddress(const std::string &pAddress) noexcept
{
    address_ = std::make_shared<std::string>(pAddress);
    dirtyFlag_[5] = true;
}
void Workers::setAddress(std::string &&pAddress) noexcept
{
    address_ = std::make_shared<std::string>(std::move(pAddress));
    dirtyFlag_[5] = true;
}

const uint32_t &Workers::getValueOfLocality() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(locality_)
        return *locality_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Workers::getLocality() const noexcept
{
    return locality_;
}
void Workers::setLocality(const uint32_t &pLocality) noexcept
{
    locality_ = std::make_shared<uint32_t>(pLocality);
    dirtyFlag_[6] = true;
}

const uint32_t &Workers::getValueOfDistrict() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(district_)
        return *district_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Workers::getDistrict() const noexcept
{
    return district_;
}
void Workers::setDistrict(const uint32_t &pDistrict) noexcept
{
    district_ = std::make_shared<uint32_t>(pDistrict);
    dirtyFlag_[7] = true;
}

const uint32_t &Workers::getValueOfState() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(state_)
        return *state_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Workers::getState() const noexcept
{
    return state_;
}
void Workers::setState(const uint32_t &pState) noexcept
{
    state_ = std::make_shared<uint32_t>(pState);
    dirtyFlag_[8] = true;
}

const uint64_t &Workers::getValueOfAdharNo() const noexcept
{
    const static uint64_t defaultValue = uint64_t();
    if(adharNo_)
        return *adharNo_;
    return defaultValue;
}
const std::shared_ptr<uint64_t> &Workers::getAdharNo() const noexcept
{
    return adharNo_;
}
void Workers::setAdharNo(const uint64_t &pAdharNo) noexcept
{
    adharNo_ = std::make_shared<uint64_t>(pAdharNo);
    dirtyFlag_[9] = true;
}

const uint8_t &Workers::getValueOfAge() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(age_)
        return *age_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Workers::getAge() const noexcept
{
    return age_;
}
void Workers::setAge(const uint8_t &pAge) noexcept
{
    age_ = std::make_shared<uint8_t>(pAge);
    dirtyFlag_[10] = true;
}

const uint8_t &Workers::getValueOfGender() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(gender_)
        return *gender_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Workers::getGender() const noexcept
{
    return gender_;
}
void Workers::setGender(const uint8_t &pGender) noexcept
{
    gender_ = std::make_shared<uint8_t>(pGender);
    dirtyFlag_[11] = true;
}

const uint8_t &Workers::getValueOfQualification() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(qualification_)
        return *qualification_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Workers::getQualification() const noexcept
{
    return qualification_;
}
void Workers::setQualification(const uint8_t &pQualification) noexcept
{
    qualification_ = std::make_shared<uint8_t>(pQualification);
    dirtyFlag_[12] = true;
}

const uint8_t &Workers::getValueOfWorkExp() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(workExp_)
        return *workExp_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Workers::getWorkExp() const noexcept
{
    return workExp_;
}
void Workers::setWorkExp(const uint8_t &pWorkExp) noexcept
{
    workExp_ = std::make_shared<uint8_t>(pWorkExp);
    dirtyFlag_[13] = true;
}

const std::string &Workers::getValueOfPreviousWork() const noexcept
{
    const static std::string defaultValue = std::string();
    if(previousWork_)
        return *previousWork_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getPreviousWork() const noexcept
{
    return previousWork_;
}
void Workers::setPreviousWork(const std::string &pPreviousWork) noexcept
{
    previousWork_ = std::make_shared<std::string>(pPreviousWork);
    dirtyFlag_[14] = true;
}
void Workers::setPreviousWork(std::string &&pPreviousWork) noexcept
{
    previousWork_ = std::make_shared<std::string>(std::move(pPreviousWork));
    dirtyFlag_[14] = true;
}
void Workers::setPreviousWorkToNull() noexcept
{
    previousWork_.reset();
    dirtyFlag_[14] = true;
}

const uint32_t &Workers::getValueOfExpectedSalary() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(expectedSalary_)
        return *expectedSalary_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Workers::getExpectedSalary() const noexcept
{
    return expectedSalary_;
}
void Workers::setExpectedSalary(const uint32_t &pExpectedSalary) noexcept
{
    expectedSalary_ = std::make_shared<uint32_t>(pExpectedSalary);
    dirtyFlag_[15] = true;
}

const uint16_t &Workers::getValueOfExpectedDailyWage() const noexcept
{
    const static uint16_t defaultValue = uint16_t();
    if(expectedDailyWage_)
        return *expectedDailyWage_;
    return defaultValue;
}
const std::shared_ptr<uint16_t> &Workers::getExpectedDailyWage() const noexcept
{
    return expectedDailyWage_;
}
void Workers::setExpectedDailyWage(const uint16_t &pExpectedDailyWage) noexcept
{
    expectedDailyWage_ = std::make_shared<uint16_t>(pExpectedDailyWage);
    dirtyFlag_[16] = true;
}

const uint8_t &Workers::getValueOfWorkHours() const noexcept
{
    const static uint8_t defaultValue = uint8_t();
    if(workHours_)
        return *workHours_;
    return defaultValue;
}
const std::shared_ptr<uint8_t> &Workers::getWorkHours() const noexcept
{
    return workHours_;
}
void Workers::setWorkHours(const uint8_t &pWorkHours) noexcept
{
    workHours_ = std::make_shared<uint8_t>(pWorkHours);
    dirtyFlag_[17] = true;
}

const uint32_t &Workers::getValueOfSkills() const noexcept
{
    const static uint32_t defaultValue = uint32_t();
    if(skills_)
        return *skills_;
    return defaultValue;
}
const std::shared_ptr<uint32_t> &Workers::getSkills() const noexcept
{
    return skills_;
}
void Workers::setSkills(const uint32_t &pSkills) noexcept
{
    skills_ = std::make_shared<uint32_t>(pSkills);
    dirtyFlag_[18] = true;
}
void Workers::setSkillsToNull() noexcept
{
    skills_.reset();
    dirtyFlag_[18] = true;
}

const std::string &Workers::getValueOfDescription() const noexcept
{
    const static std::string defaultValue = std::string();
    if(description_)
        return *description_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getDescription() const noexcept
{
    return description_;
}
void Workers::setDescription(const std::string &pDescription) noexcept
{
    description_ = std::make_shared<std::string>(pDescription);
    dirtyFlag_[19] = true;
}
void Workers::setDescription(std::string &&pDescription) noexcept
{
    description_ = std::make_shared<std::string>(std::move(pDescription));
    dirtyFlag_[19] = true;
}
void Workers::setDescriptionToNull() noexcept
{
    description_.reset();
    dirtyFlag_[19] = true;
}

const std::string &Workers::getValueOfExtraCondition() const noexcept
{
    const static std::string defaultValue = std::string();
    if(extraCondition_)
        return *extraCondition_;
    return defaultValue;
}
const std::shared_ptr<std::string> &Workers::getExtraCondition() const noexcept
{
    return extraCondition_;
}
void Workers::setExtraCondition(const std::string &pExtraCondition) noexcept
{
    extraCondition_ = std::make_shared<std::string>(pExtraCondition);
    dirtyFlag_[20] = true;
}
void Workers::setExtraCondition(std::string &&pExtraCondition) noexcept
{
    extraCondition_ = std::make_shared<std::string>(std::move(pExtraCondition));
    dirtyFlag_[20] = true;
}
void Workers::setExtraConditionToNull() noexcept
{
    extraCondition_.reset();
    dirtyFlag_[20] = true;
}

void Workers::updateId(const uint64_t id)
{
    id_ = std::make_shared<uint32_t>(static_cast<uint32_t>(id));
}

const std::vector<std::string> &Workers::insertColumns() noexcept
{
    static const std::vector<std::string> inCols={
        "full_name",
        "email",
        "contact",
        "secondary_contact",
        "address",
        "locality",
        "district",
        "state",
        "adhar_no",
        "age",
        "gender",
        "qualification",
        "work_exp",
        "previous_work",
        "expected_salary",
        "expected_daily_wage",
        "work_hours",
        "skills",
        "description",
        "extra_condition"
    };
    return inCols;
}

void Workers::outputArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFullName())
        {
            binder << getValueOfFullName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getContact())
        {
            binder << getValueOfContact();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSecondaryContact())
        {
            binder << getValueOfSecondaryContact();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getLocality())
        {
            binder << getValueOfLocality();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDistrict())
        {
            binder << getValueOfDistrict();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAdharNo())
        {
            binder << getValueOfAdharNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getAge())
        {
            binder << getValueOfAge();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getQualification())
        {
            binder << getValueOfQualification();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getWorkExp())
        {
            binder << getValueOfWorkExp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getPreviousWork())
        {
            binder << getValueOfPreviousWork();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getExpectedSalary())
        {
            binder << getValueOfExpectedSalary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getExpectedDailyWage())
        {
            binder << getValueOfExpectedDailyWage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getWorkHours())
        {
            binder << getValueOfWorkHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSkills())
        {
            binder << getValueOfSkills();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getExtraCondition())
        {
            binder << getValueOfExtraCondition();
        }
        else
        {
            binder << nullptr;
        }
    }
}

const std::vector<std::string> Workers::updateColumns() const
{
    std::vector<std::string> ret;
    if(dirtyFlag_[1])
    {
        ret.push_back(getColumnName(1));
    }
    if(dirtyFlag_[2])
    {
        ret.push_back(getColumnName(2));
    }
    if(dirtyFlag_[3])
    {
        ret.push_back(getColumnName(3));
    }
    if(dirtyFlag_[4])
    {
        ret.push_back(getColumnName(4));
    }
    if(dirtyFlag_[5])
    {
        ret.push_back(getColumnName(5));
    }
    if(dirtyFlag_[6])
    {
        ret.push_back(getColumnName(6));
    }
    if(dirtyFlag_[7])
    {
        ret.push_back(getColumnName(7));
    }
    if(dirtyFlag_[8])
    {
        ret.push_back(getColumnName(8));
    }
    if(dirtyFlag_[9])
    {
        ret.push_back(getColumnName(9));
    }
    if(dirtyFlag_[10])
    {
        ret.push_back(getColumnName(10));
    }
    if(dirtyFlag_[11])
    {
        ret.push_back(getColumnName(11));
    }
    if(dirtyFlag_[12])
    {
        ret.push_back(getColumnName(12));
    }
    if(dirtyFlag_[13])
    {
        ret.push_back(getColumnName(13));
    }
    if(dirtyFlag_[14])
    {
        ret.push_back(getColumnName(14));
    }
    if(dirtyFlag_[15])
    {
        ret.push_back(getColumnName(15));
    }
    if(dirtyFlag_[16])
    {
        ret.push_back(getColumnName(16));
    }
    if(dirtyFlag_[17])
    {
        ret.push_back(getColumnName(17));
    }
    if(dirtyFlag_[18])
    {
        ret.push_back(getColumnName(18));
    }
    if(dirtyFlag_[19])
    {
        ret.push_back(getColumnName(19));
    }
    if(dirtyFlag_[20])
    {
        ret.push_back(getColumnName(20));
    }
    return ret;
}

void Workers::updateArgs(drogon::orm::internal::SqlBinder &binder) const
{
    if(dirtyFlag_[1])
    {
        if(getFullName())
        {
            binder << getValueOfFullName();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[2])
    {
        if(getEmail())
        {
            binder << getValueOfEmail();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[3])
    {
        if(getContact())
        {
            binder << getValueOfContact();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[4])
    {
        if(getSecondaryContact())
        {
            binder << getValueOfSecondaryContact();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[5])
    {
        if(getAddress())
        {
            binder << getValueOfAddress();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[6])
    {
        if(getLocality())
        {
            binder << getValueOfLocality();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[7])
    {
        if(getDistrict())
        {
            binder << getValueOfDistrict();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[8])
    {
        if(getState())
        {
            binder << getValueOfState();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[9])
    {
        if(getAdharNo())
        {
            binder << getValueOfAdharNo();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[10])
    {
        if(getAge())
        {
            binder << getValueOfAge();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[11])
    {
        if(getGender())
        {
            binder << getValueOfGender();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[12])
    {
        if(getQualification())
        {
            binder << getValueOfQualification();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[13])
    {
        if(getWorkExp())
        {
            binder << getValueOfWorkExp();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[14])
    {
        if(getPreviousWork())
        {
            binder << getValueOfPreviousWork();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[15])
    {
        if(getExpectedSalary())
        {
            binder << getValueOfExpectedSalary();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[16])
    {
        if(getExpectedDailyWage())
        {
            binder << getValueOfExpectedDailyWage();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[17])
    {
        if(getWorkHours())
        {
            binder << getValueOfWorkHours();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[18])
    {
        if(getSkills())
        {
            binder << getValueOfSkills();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[19])
    {
        if(getDescription())
        {
            binder << getValueOfDescription();
        }
        else
        {
            binder << nullptr;
        }
    }
    if(dirtyFlag_[20])
    {
        if(getExtraCondition())
        {
            binder << getValueOfExtraCondition();
        }
        else
        {
            binder << nullptr;
        }
    }
}
Json::Value Workers::toJson() const
{
    Json::Value ret;
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFullName())
    {
        ret["full_name"]=getValueOfFullName();
    }
    else
    {
        ret["full_name"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getContact())
    {
        ret["contact"]=(Json::UInt64)getValueOfContact();
    }
    else
    {
        ret["contact"]=Json::Value();
    }
    if(getSecondaryContact())
    {
        ret["secondary_contact"]=(Json::UInt64)getValueOfSecondaryContact();
    }
    else
    {
        ret["secondary_contact"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getLocality())
    {
        ret["locality"]=getValueOfLocality();
    }
    else
    {
        ret["locality"]=Json::Value();
    }
    if(getDistrict())
    {
        ret["district"]=getValueOfDistrict();
    }
    else
    {
        ret["district"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    if(getAdharNo())
    {
        ret["adhar_no"]=(Json::UInt64)getValueOfAdharNo();
    }
    else
    {
        ret["adhar_no"]=Json::Value();
    }
    if(getAge())
    {
        ret["age"]=getValueOfAge();
    }
    else
    {
        ret["age"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getQualification())
    {
        ret["qualification"]=getValueOfQualification();
    }
    else
    {
        ret["qualification"]=Json::Value();
    }
    if(getWorkExp())
    {
        ret["work_exp"]=getValueOfWorkExp();
    }
    else
    {
        ret["work_exp"]=Json::Value();
    }
    if(getPreviousWork())
    {
        ret["previous_work"]=getValueOfPreviousWork();
    }
    else
    {
        ret["previous_work"]=Json::Value();
    }
    if(getExpectedSalary())
    {
        ret["expected_salary"]=getValueOfExpectedSalary();
    }
    else
    {
        ret["expected_salary"]=Json::Value();
    }
    if(getExpectedDailyWage())
    {
        ret["expected_daily_wage"]=getValueOfExpectedDailyWage();
    }
    else
    {
        ret["expected_daily_wage"]=Json::Value();
    }
    if(getWorkHours())
    {
        ret["work_hours"]=getValueOfWorkHours();
    }
    else
    {
        ret["work_hours"]=Json::Value();
    }
    if(getSkills())
    {
        ret["skills"]=getValueOfSkills();
    }
    else
    {
        ret["skills"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getExtraCondition())
    {
        ret["extra_condition"]=getValueOfExtraCondition();
    }
    else
    {
        ret["extra_condition"]=Json::Value();
    }
    return ret;
}

Json::Value Workers::toMasqueradedJson(
    const std::vector<std::string> &pMasqueradingVector) const
{
    Json::Value ret;
    if(pMasqueradingVector.size() == 21)
    {
        if(!pMasqueradingVector[0].empty())
        {
            if(getId())
            {
                ret[pMasqueradingVector[0]]=getValueOfId();
            }
            else
            {
                ret[pMasqueradingVector[0]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[1].empty())
        {
            if(getFullName())
            {
                ret[pMasqueradingVector[1]]=getValueOfFullName();
            }
            else
            {
                ret[pMasqueradingVector[1]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[2].empty())
        {
            if(getEmail())
            {
                ret[pMasqueradingVector[2]]=getValueOfEmail();
            }
            else
            {
                ret[pMasqueradingVector[2]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[3].empty())
        {
            if(getContact())
            {
                ret[pMasqueradingVector[3]]=(Json::UInt64)getValueOfContact();
            }
            else
            {
                ret[pMasqueradingVector[3]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[4].empty())
        {
            if(getSecondaryContact())
            {
                ret[pMasqueradingVector[4]]=(Json::UInt64)getValueOfSecondaryContact();
            }
            else
            {
                ret[pMasqueradingVector[4]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[5].empty())
        {
            if(getAddress())
            {
                ret[pMasqueradingVector[5]]=getValueOfAddress();
            }
            else
            {
                ret[pMasqueradingVector[5]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[6].empty())
        {
            if(getLocality())
            {
                ret[pMasqueradingVector[6]]=getValueOfLocality();
            }
            else
            {
                ret[pMasqueradingVector[6]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[7].empty())
        {
            if(getDistrict())
            {
                ret[pMasqueradingVector[7]]=getValueOfDistrict();
            }
            else
            {
                ret[pMasqueradingVector[7]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[8].empty())
        {
            if(getState())
            {
                ret[pMasqueradingVector[8]]=getValueOfState();
            }
            else
            {
                ret[pMasqueradingVector[8]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[9].empty())
        {
            if(getAdharNo())
            {
                ret[pMasqueradingVector[9]]=(Json::UInt64)getValueOfAdharNo();
            }
            else
            {
                ret[pMasqueradingVector[9]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[10].empty())
        {
            if(getAge())
            {
                ret[pMasqueradingVector[10]]=getValueOfAge();
            }
            else
            {
                ret[pMasqueradingVector[10]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[11].empty())
        {
            if(getGender())
            {
                ret[pMasqueradingVector[11]]=getValueOfGender();
            }
            else
            {
                ret[pMasqueradingVector[11]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[12].empty())
        {
            if(getQualification())
            {
                ret[pMasqueradingVector[12]]=getValueOfQualification();
            }
            else
            {
                ret[pMasqueradingVector[12]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[13].empty())
        {
            if(getWorkExp())
            {
                ret[pMasqueradingVector[13]]=getValueOfWorkExp();
            }
            else
            {
                ret[pMasqueradingVector[13]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[14].empty())
        {
            if(getPreviousWork())
            {
                ret[pMasqueradingVector[14]]=getValueOfPreviousWork();
            }
            else
            {
                ret[pMasqueradingVector[14]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[15].empty())
        {
            if(getExpectedSalary())
            {
                ret[pMasqueradingVector[15]]=getValueOfExpectedSalary();
            }
            else
            {
                ret[pMasqueradingVector[15]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[16].empty())
        {
            if(getExpectedDailyWage())
            {
                ret[pMasqueradingVector[16]]=getValueOfExpectedDailyWage();
            }
            else
            {
                ret[pMasqueradingVector[16]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[17].empty())
        {
            if(getWorkHours())
            {
                ret[pMasqueradingVector[17]]=getValueOfWorkHours();
            }
            else
            {
                ret[pMasqueradingVector[17]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[18].empty())
        {
            if(getSkills())
            {
                ret[pMasqueradingVector[18]]=getValueOfSkills();
            }
            else
            {
                ret[pMasqueradingVector[18]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[19].empty())
        {
            if(getDescription())
            {
                ret[pMasqueradingVector[19]]=getValueOfDescription();
            }
            else
            {
                ret[pMasqueradingVector[19]]=Json::Value();
            }
        }
        if(!pMasqueradingVector[20].empty())
        {
            if(getExtraCondition())
            {
                ret[pMasqueradingVector[20]]=getValueOfExtraCondition();
            }
            else
            {
                ret[pMasqueradingVector[20]]=Json::Value();
            }
        }
        return ret;
    }
    LOG_ERROR << "Masquerade failed";
    if(getId())
    {
        ret["id"]=getValueOfId();
    }
    else
    {
        ret["id"]=Json::Value();
    }
    if(getFullName())
    {
        ret["full_name"]=getValueOfFullName();
    }
    else
    {
        ret["full_name"]=Json::Value();
    }
    if(getEmail())
    {
        ret["email"]=getValueOfEmail();
    }
    else
    {
        ret["email"]=Json::Value();
    }
    if(getContact())
    {
        ret["contact"]=(Json::UInt64)getValueOfContact();
    }
    else
    {
        ret["contact"]=Json::Value();
    }
    if(getSecondaryContact())
    {
        ret["secondary_contact"]=(Json::UInt64)getValueOfSecondaryContact();
    }
    else
    {
        ret["secondary_contact"]=Json::Value();
    }
    if(getAddress())
    {
        ret["address"]=getValueOfAddress();
    }
    else
    {
        ret["address"]=Json::Value();
    }
    if(getLocality())
    {
        ret["locality"]=getValueOfLocality();
    }
    else
    {
        ret["locality"]=Json::Value();
    }
    if(getDistrict())
    {
        ret["district"]=getValueOfDistrict();
    }
    else
    {
        ret["district"]=Json::Value();
    }
    if(getState())
    {
        ret["state"]=getValueOfState();
    }
    else
    {
        ret["state"]=Json::Value();
    }
    if(getAdharNo())
    {
        ret["adhar_no"]=(Json::UInt64)getValueOfAdharNo();
    }
    else
    {
        ret["adhar_no"]=Json::Value();
    }
    if(getAge())
    {
        ret["age"]=getValueOfAge();
    }
    else
    {
        ret["age"]=Json::Value();
    }
    if(getGender())
    {
        ret["gender"]=getValueOfGender();
    }
    else
    {
        ret["gender"]=Json::Value();
    }
    if(getQualification())
    {
        ret["qualification"]=getValueOfQualification();
    }
    else
    {
        ret["qualification"]=Json::Value();
    }
    if(getWorkExp())
    {
        ret["work_exp"]=getValueOfWorkExp();
    }
    else
    {
        ret["work_exp"]=Json::Value();
    }
    if(getPreviousWork())
    {
        ret["previous_work"]=getValueOfPreviousWork();
    }
    else
    {
        ret["previous_work"]=Json::Value();
    }
    if(getExpectedSalary())
    {
        ret["expected_salary"]=getValueOfExpectedSalary();
    }
    else
    {
        ret["expected_salary"]=Json::Value();
    }
    if(getExpectedDailyWage())
    {
        ret["expected_daily_wage"]=getValueOfExpectedDailyWage();
    }
    else
    {
        ret["expected_daily_wage"]=Json::Value();
    }
    if(getWorkHours())
    {
        ret["work_hours"]=getValueOfWorkHours();
    }
    else
    {
        ret["work_hours"]=Json::Value();
    }
    if(getSkills())
    {
        ret["skills"]=getValueOfSkills();
    }
    else
    {
        ret["skills"]=Json::Value();
    }
    if(getDescription())
    {
        ret["description"]=getValueOfDescription();
    }
    else
    {
        ret["description"]=Json::Value();
    }
    if(getExtraCondition())
    {
        ret["extra_condition"]=getValueOfExtraCondition();
    }
    else
    {
        ret["extra_condition"]=Json::Value();
    }
    return ret;
}

bool Workers::validateJsonForCreation(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, true))
            return false;
    }
    if(pJson.isMember("full_name"))
    {
        if(!validJsonOfField(1, "full_name", pJson["full_name"], err, true))
            return false;
    }
    else
    {
        err="The full_name column cannot be null";
        return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(2, "email", pJson["email"], err, true))
            return false;
    }
    else
    {
        err="The email column cannot be null";
        return false;
    }
    if(pJson.isMember("contact"))
    {
        if(!validJsonOfField(3, "contact", pJson["contact"], err, true))
            return false;
    }
    else
    {
        err="The contact column cannot be null";
        return false;
    }
    if(pJson.isMember("secondary_contact"))
    {
        if(!validJsonOfField(4, "secondary_contact", pJson["secondary_contact"], err, true))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(5, "address", pJson["address"], err, true))
            return false;
    }
    else
    {
        err="The address column cannot be null";
        return false;
    }
    if(pJson.isMember("locality"))
    {
        if(!validJsonOfField(6, "locality", pJson["locality"], err, true))
            return false;
    }
    else
    {
        err="The locality column cannot be null";
        return false;
    }
    if(pJson.isMember("district"))
    {
        if(!validJsonOfField(7, "district", pJson["district"], err, true))
            return false;
    }
    else
    {
        err="The district column cannot be null";
        return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(8, "state", pJson["state"], err, true))
            return false;
    }
    else
    {
        err="The state column cannot be null";
        return false;
    }
    if(pJson.isMember("adhar_no"))
    {
        if(!validJsonOfField(9, "adhar_no", pJson["adhar_no"], err, true))
            return false;
    }
    else
    {
        err="The adhar_no column cannot be null";
        return false;
    }
    if(pJson.isMember("age"))
    {
        if(!validJsonOfField(10, "age", pJson["age"], err, true))
            return false;
    }
    else
    {
        err="The age column cannot be null";
        return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(11, "gender", pJson["gender"], err, true))
            return false;
    }
    else
    {
        err="The gender column cannot be null";
        return false;
    }
    if(pJson.isMember("qualification"))
    {
        if(!validJsonOfField(12, "qualification", pJson["qualification"], err, true))
            return false;
    }
    else
    {
        err="The qualification column cannot be null";
        return false;
    }
    if(pJson.isMember("work_exp"))
    {
        if(!validJsonOfField(13, "work_exp", pJson["work_exp"], err, true))
            return false;
    }
    else
    {
        err="The work_exp column cannot be null";
        return false;
    }
    if(pJson.isMember("previous_work"))
    {
        if(!validJsonOfField(14, "previous_work", pJson["previous_work"], err, true))
            return false;
    }
    if(pJson.isMember("expected_salary"))
    {
        if(!validJsonOfField(15, "expected_salary", pJson["expected_salary"], err, true))
            return false;
    }
    else
    {
        err="The expected_salary column cannot be null";
        return false;
    }
    if(pJson.isMember("expected_daily_wage"))
    {
        if(!validJsonOfField(16, "expected_daily_wage", pJson["expected_daily_wage"], err, true))
            return false;
    }
    else
    {
        err="The expected_daily_wage column cannot be null";
        return false;
    }
    if(pJson.isMember("work_hours"))
    {
        if(!validJsonOfField(17, "work_hours", pJson["work_hours"], err, true))
            return false;
    }
    else
    {
        err="The work_hours column cannot be null";
        return false;
    }
    if(pJson.isMember("skills"))
    {
        if(!validJsonOfField(18, "skills", pJson["skills"], err, true))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(19, "description", pJson["description"], err, true))
            return false;
    }
    if(pJson.isMember("extra_condition"))
    {
        if(!validJsonOfField(20, "extra_condition", pJson["extra_condition"], err, true))
            return false;
    }
    return true;
}
bool Workers::validateMasqueradedJsonForCreation(const Json::Value &pJson,
                                                 const std::vector<std::string> &pMasqueradingVector,
                                                 std::string &err)
{
    if(pMasqueradingVector.size() != 21)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty())
      {
          if(pJson.isMember(pMasqueradingVector[0]))
          {
              if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[1].empty())
      {
          if(pJson.isMember(pMasqueradingVector[1]))
          {
              if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[1] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[2].empty())
      {
          if(pJson.isMember(pMasqueradingVector[2]))
          {
              if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[2] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[3].empty())
      {
          if(pJson.isMember(pMasqueradingVector[3]))
          {
              if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[3] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[4].empty())
      {
          if(pJson.isMember(pMasqueradingVector[4]))
          {
              if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[5].empty())
      {
          if(pJson.isMember(pMasqueradingVector[5]))
          {
              if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[5] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[6].empty())
      {
          if(pJson.isMember(pMasqueradingVector[6]))
          {
              if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[6] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[7].empty())
      {
          if(pJson.isMember(pMasqueradingVector[7]))
          {
              if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[7] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[8].empty())
      {
          if(pJson.isMember(pMasqueradingVector[8]))
          {
              if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[8] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[9].empty())
      {
          if(pJson.isMember(pMasqueradingVector[9]))
          {
              if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[9] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[10].empty())
      {
          if(pJson.isMember(pMasqueradingVector[10]))
          {
              if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[10] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[11].empty())
      {
          if(pJson.isMember(pMasqueradingVector[11]))
          {
              if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[11] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[12].empty())
      {
          if(pJson.isMember(pMasqueradingVector[12]))
          {
              if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[12] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[13].empty())
      {
          if(pJson.isMember(pMasqueradingVector[13]))
          {
              if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[13] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[14].empty())
      {
          if(pJson.isMember(pMasqueradingVector[14]))
          {
              if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[15].empty())
      {
          if(pJson.isMember(pMasqueradingVector[15]))
          {
              if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[15] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[16].empty())
      {
          if(pJson.isMember(pMasqueradingVector[16]))
          {
              if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[16] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[17].empty())
      {
          if(pJson.isMember(pMasqueradingVector[17]))
          {
              if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, true))
                  return false;
          }
        else
        {
            err="The " + pMasqueradingVector[17] + " column cannot be null";
            return false;
        }
      }
      if(!pMasqueradingVector[18].empty())
      {
          if(pJson.isMember(pMasqueradingVector[18]))
          {
              if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[19].empty())
      {
          if(pJson.isMember(pMasqueradingVector[19]))
          {
              if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, true))
                  return false;
          }
      }
      if(!pMasqueradingVector[20].empty())
      {
          if(pJson.isMember(pMasqueradingVector[20]))
          {
              if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, true))
                  return false;
          }
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Workers::validateJsonForUpdate(const Json::Value &pJson, std::string &err)
{
    if(pJson.isMember("id"))
    {
        if(!validJsonOfField(0, "id", pJson["id"], err, false))
            return false;
    }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
    if(pJson.isMember("full_name"))
    {
        if(!validJsonOfField(1, "full_name", pJson["full_name"], err, false))
            return false;
    }
    if(pJson.isMember("email"))
    {
        if(!validJsonOfField(2, "email", pJson["email"], err, false))
            return false;
    }
    if(pJson.isMember("contact"))
    {
        if(!validJsonOfField(3, "contact", pJson["contact"], err, false))
            return false;
    }
    if(pJson.isMember("secondary_contact"))
    {
        if(!validJsonOfField(4, "secondary_contact", pJson["secondary_contact"], err, false))
            return false;
    }
    if(pJson.isMember("address"))
    {
        if(!validJsonOfField(5, "address", pJson["address"], err, false))
            return false;
    }
    if(pJson.isMember("locality"))
    {
        if(!validJsonOfField(6, "locality", pJson["locality"], err, false))
            return false;
    }
    if(pJson.isMember("district"))
    {
        if(!validJsonOfField(7, "district", pJson["district"], err, false))
            return false;
    }
    if(pJson.isMember("state"))
    {
        if(!validJsonOfField(8, "state", pJson["state"], err, false))
            return false;
    }
    if(pJson.isMember("adhar_no"))
    {
        if(!validJsonOfField(9, "adhar_no", pJson["adhar_no"], err, false))
            return false;
    }
    if(pJson.isMember("age"))
    {
        if(!validJsonOfField(10, "age", pJson["age"], err, false))
            return false;
    }
    if(pJson.isMember("gender"))
    {
        if(!validJsonOfField(11, "gender", pJson["gender"], err, false))
            return false;
    }
    if(pJson.isMember("qualification"))
    {
        if(!validJsonOfField(12, "qualification", pJson["qualification"], err, false))
            return false;
    }
    if(pJson.isMember("work_exp"))
    {
        if(!validJsonOfField(13, "work_exp", pJson["work_exp"], err, false))
            return false;
    }
    if(pJson.isMember("previous_work"))
    {
        if(!validJsonOfField(14, "previous_work", pJson["previous_work"], err, false))
            return false;
    }
    if(pJson.isMember("expected_salary"))
    {
        if(!validJsonOfField(15, "expected_salary", pJson["expected_salary"], err, false))
            return false;
    }
    if(pJson.isMember("expected_daily_wage"))
    {
        if(!validJsonOfField(16, "expected_daily_wage", pJson["expected_daily_wage"], err, false))
            return false;
    }
    if(pJson.isMember("work_hours"))
    {
        if(!validJsonOfField(17, "work_hours", pJson["work_hours"], err, false))
            return false;
    }
    if(pJson.isMember("skills"))
    {
        if(!validJsonOfField(18, "skills", pJson["skills"], err, false))
            return false;
    }
    if(pJson.isMember("description"))
    {
        if(!validJsonOfField(19, "description", pJson["description"], err, false))
            return false;
    }
    if(pJson.isMember("extra_condition"))
    {
        if(!validJsonOfField(20, "extra_condition", pJson["extra_condition"], err, false))
            return false;
    }
    return true;
}
bool Workers::validateMasqueradedJsonForUpdate(const Json::Value &pJson,
                                               const std::vector<std::string> &pMasqueradingVector,
                                               std::string &err)
{
    if(pMasqueradingVector.size() != 21)
    {
        err = "Bad masquerading vector";
        return false;
    }
    try {
      if(!pMasqueradingVector[0].empty() && pJson.isMember(pMasqueradingVector[0]))
      {
          if(!validJsonOfField(0, pMasqueradingVector[0], pJson[pMasqueradingVector[0]], err, false))
              return false;
      }
    else
    {
        err = "The value of primary key must be set in the json object for update";
        return false;
    }
      if(!pMasqueradingVector[1].empty() && pJson.isMember(pMasqueradingVector[1]))
      {
          if(!validJsonOfField(1, pMasqueradingVector[1], pJson[pMasqueradingVector[1]], err, false))
              return false;
      }
      if(!pMasqueradingVector[2].empty() && pJson.isMember(pMasqueradingVector[2]))
      {
          if(!validJsonOfField(2, pMasqueradingVector[2], pJson[pMasqueradingVector[2]], err, false))
              return false;
      }
      if(!pMasqueradingVector[3].empty() && pJson.isMember(pMasqueradingVector[3]))
      {
          if(!validJsonOfField(3, pMasqueradingVector[3], pJson[pMasqueradingVector[3]], err, false))
              return false;
      }
      if(!pMasqueradingVector[4].empty() && pJson.isMember(pMasqueradingVector[4]))
      {
          if(!validJsonOfField(4, pMasqueradingVector[4], pJson[pMasqueradingVector[4]], err, false))
              return false;
      }
      if(!pMasqueradingVector[5].empty() && pJson.isMember(pMasqueradingVector[5]))
      {
          if(!validJsonOfField(5, pMasqueradingVector[5], pJson[pMasqueradingVector[5]], err, false))
              return false;
      }
      if(!pMasqueradingVector[6].empty() && pJson.isMember(pMasqueradingVector[6]))
      {
          if(!validJsonOfField(6, pMasqueradingVector[6], pJson[pMasqueradingVector[6]], err, false))
              return false;
      }
      if(!pMasqueradingVector[7].empty() && pJson.isMember(pMasqueradingVector[7]))
      {
          if(!validJsonOfField(7, pMasqueradingVector[7], pJson[pMasqueradingVector[7]], err, false))
              return false;
      }
      if(!pMasqueradingVector[8].empty() && pJson.isMember(pMasqueradingVector[8]))
      {
          if(!validJsonOfField(8, pMasqueradingVector[8], pJson[pMasqueradingVector[8]], err, false))
              return false;
      }
      if(!pMasqueradingVector[9].empty() && pJson.isMember(pMasqueradingVector[9]))
      {
          if(!validJsonOfField(9, pMasqueradingVector[9], pJson[pMasqueradingVector[9]], err, false))
              return false;
      }
      if(!pMasqueradingVector[10].empty() && pJson.isMember(pMasqueradingVector[10]))
      {
          if(!validJsonOfField(10, pMasqueradingVector[10], pJson[pMasqueradingVector[10]], err, false))
              return false;
      }
      if(!pMasqueradingVector[11].empty() && pJson.isMember(pMasqueradingVector[11]))
      {
          if(!validJsonOfField(11, pMasqueradingVector[11], pJson[pMasqueradingVector[11]], err, false))
              return false;
      }
      if(!pMasqueradingVector[12].empty() && pJson.isMember(pMasqueradingVector[12]))
      {
          if(!validJsonOfField(12, pMasqueradingVector[12], pJson[pMasqueradingVector[12]], err, false))
              return false;
      }
      if(!pMasqueradingVector[13].empty() && pJson.isMember(pMasqueradingVector[13]))
      {
          if(!validJsonOfField(13, pMasqueradingVector[13], pJson[pMasqueradingVector[13]], err, false))
              return false;
      }
      if(!pMasqueradingVector[14].empty() && pJson.isMember(pMasqueradingVector[14]))
      {
          if(!validJsonOfField(14, pMasqueradingVector[14], pJson[pMasqueradingVector[14]], err, false))
              return false;
      }
      if(!pMasqueradingVector[15].empty() && pJson.isMember(pMasqueradingVector[15]))
      {
          if(!validJsonOfField(15, pMasqueradingVector[15], pJson[pMasqueradingVector[15]], err, false))
              return false;
      }
      if(!pMasqueradingVector[16].empty() && pJson.isMember(pMasqueradingVector[16]))
      {
          if(!validJsonOfField(16, pMasqueradingVector[16], pJson[pMasqueradingVector[16]], err, false))
              return false;
      }
      if(!pMasqueradingVector[17].empty() && pJson.isMember(pMasqueradingVector[17]))
      {
          if(!validJsonOfField(17, pMasqueradingVector[17], pJson[pMasqueradingVector[17]], err, false))
              return false;
      }
      if(!pMasqueradingVector[18].empty() && pJson.isMember(pMasqueradingVector[18]))
      {
          if(!validJsonOfField(18, pMasqueradingVector[18], pJson[pMasqueradingVector[18]], err, false))
              return false;
      }
      if(!pMasqueradingVector[19].empty() && pJson.isMember(pMasqueradingVector[19]))
      {
          if(!validJsonOfField(19, pMasqueradingVector[19], pJson[pMasqueradingVector[19]], err, false))
              return false;
      }
      if(!pMasqueradingVector[20].empty() && pJson.isMember(pMasqueradingVector[20]))
      {
          if(!validJsonOfField(20, pMasqueradingVector[20], pJson[pMasqueradingVector[20]], err, false))
              return false;
      }
    }
    catch(const Json::LogicError &e)
    {
      err = e.what();
      return false;
    }
    return true;
}
bool Workers::validJsonOfField(size_t index,
                               const std::string &fieldName,
                               const Json::Value &pJson,
                               std::string &err,
                               bool isForCreation)
{
    switch(index)
    {
        case 0:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(isForCreation)
            {
                err="The automatic primary key cannot be set";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 1:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 60)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 60)";
                return false;
            }

            break;
        case 2:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 120)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 120)";
                return false;
            }

            break;
        case 3:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 4:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 5:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 6:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 7:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 8:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 9:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt64())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 10:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 11:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 12:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 13:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 14:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 255)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 255)";
                return false;
            }

            break;
        case 15:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 16:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 17:
            if(pJson.isNull())
            {
                err="The " + fieldName + " column cannot be null";
                return false;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 18:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isUInt())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            break;
        case 19:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 500)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 500)";
                return false;
            }

            break;
        case 20:
            if(pJson.isNull())
            {
                return true;
            }
            if(!pJson.isString())
            {
                err="Type error in the "+fieldName+" field";
                return false;
            }
            // asString().length() creates a string object, is there any better way to validate the length?
            if(pJson.isString() && pJson.asString().length() > 500)
            {
                err="String length exceeds limit for the " +
                    fieldName +
                    " field (the maximum value is 500)";
                return false;
            }

            break;
        default:
            err="Internal error in the server";
            return false;
    }
    return true;
}
